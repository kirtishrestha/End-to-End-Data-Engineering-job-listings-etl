version: '3.8'

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow.Dockerfile
  env_file: ./.env
  environment:
    PYTHONPATH: /opt/airflow
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    AIRFLOW_FERNET_KEY: '${AIRFLOW_FERNET_KEY}'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__LOGGING_LEVEL: INFO
    AIRFLOW_UID: '50000'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./data:/opt/airflow/data
    - ./scripts:/opt/airflow/scripts
    - ./jars:/opt/airflow/jars
    - airflow_logs:/opt/airflow/logs
    - ./.env:/opt/airflow/.env
  networks:
    - workforce-network
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:15-alpine
    container_name: workforce-postgres
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DB}'
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - workforce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark-master:
    build:
      context: .
      dockerfile: spark.Dockerfile
    container_name: spark-master
    environment:
      SPARK_MODE: master
      PYSPARK_PYTHON: python3.11
      PYSPARK_DRIVER_PYTHON: python3.11
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./jars:/opt/airflow/jars
    networks:
      - workforce-network
      
  spark-worker:
    build:
      context: .
      dockerfile: spark.Dockerfile
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      PYSPARK_PYTHON: python3.11
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./jars:/opt/airflow/jars
    networks:
      - workforce-network

  superset:
    build:
      context: .
      dockerfile: superset.Dockerfile
    container_name: superset
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SUPERSET_SECRET_KEY: '${SUPERSET_SECRET_KEY}'
      SUPERSET_DATABASE_URI: "postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'
    ports:
      - "8088:8088"
    volumes:
      - superset_home:/app/superset_home
    networks:
      - workforce-network
    command: >
      bash -c "
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin || echo 'User exists' &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger 
      "

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        airflow db init
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true
        # This command will DELETE the old connection and add the CORRECT one.
        airflow connections delete 'spark_default' || true
        airflow connections add 'spark_default' --conn-type 'spark' --conn-host 'spark://spark-master' --conn-port '7077'
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always

volumes:
  postgres_data:
  superset_home:
  airflow_logs:

networks:
  workforce-network:
    driver: bridge